---
- name: Solve the OCP4 on OpenStack machine management lab
  hosts: localhost
  gather_facts: false
  become: false
  environment:
    KUBECONFIG: "{{ lookup('env', 'HOME') }}/openstack-upi/auth/kubeconfig"
    INFRA_ID: "INFRA_ID=$(jq -r .infraID {{ lookup('env', 'HOME') }}/openstack-upi/metadata.json)"

  tasks:
    - name: Set python version
      set_fact:
        ansible_python_interpreter: /usr/bin/python3
      tags: test

    - name: Get infra_id
      shell: "jq -r .infraID $HOME/openstack-upi/metadata.json"
      register: r_infra_id
      tags: test

    - name: Create worker machineset templates
      template:
        src: "./templates/worker-ms.yaml.j2"
        dest: "$HOME/worker-ms-{{ item }}.yaml"
      vars:
        INFRA_ID: "{{ r_infra_id.stdout }}"
        GUID: "{{ lookup('env', 'GUID') }}"
      loop:
        - 1a
        - 1b

    - name: Create new worker MachineSets
      k8s:
        state: present
        src: "$HOME/worker-ms-{{ item }}.yaml"
      loop:
        - 1a
        - 1b
    
    - name: Create infra MachineSet templates
      template:
        src: ./templates/infra-ms.yaml.j2
        dest: "$HOME/infra-ms.yaml"
      vars:
        INFRA_ID: "{{ r_infra_id.stdout }}"
        GUID: "{{ lookup('env', 'GUID') }}"

    - name: Create new infra MachineSet
      k8s:
        state: present
        src: "$HOME/infra-ms.yaml"

    - name: Wait for nodes to come online
      pause:
        seconds: 300

    - name: Check if nodes are available (10m max)
      k8s_facts:
        api_version: v1
        kind: Node
        label_selectors:
        - node-role.kubernetes.io/worker
      register: r_check_nodes
      retries: 20
      delay: 30
      until:
        - r_check_nodes.resources | json_query(general_use_query) | length >= 2
        - r_check_nodes.resources | json_query(infra_query) | length >= 1
      vars:
        general_use_query: >-
          [?metadata.labels."node-role.kubernetes.io/general-use"=='']
        infra_query: >-
          [?metadata.labels."node-role.kubernetes.io/infra"=='']
      
    - name: Drain and cordon manual workers
      shell: /usr/local/sbin/oc adm drain $INFRA_ID-worker-{{ item }} --ignore-daemonsets --delete-local-data --force=true
      environment:
        INFRA_ID: "{{ r_infra_id.stdout }}"
      loop:
        - 0
        - 1
      tags: test

    - pause:
        seconds: 30

    - name: Delete nodes
      shell: /usr/local/sbin/oc delete node {{ r_infra_id.stdout }}-worker-{{ item }}
      loop:
        - 0
        - 1

    - name: Delete OpenStack instances
      shell: /usr/local/bin/openstack server list --name {{ r_infra_id.stdout }}-worker -f value -c ID | xargs openstack server delete

    - name: Wait for the instances to delete
      pause:
        seconds: 30

    - name: Make sure instances are gone
      shell: /usr/local/bin/openstack server list --name {{r_infra_id.stdout }}-worker
      register: r_osp_instances
    
    - debug:
        var: r_osp_instances

    - name: Make sure instances are gone
      assert:
        that:
          r_osp_instances.stdout_lines | length == 0